//Nick Zheng
//Assignment 5 - Side Scroller

#pragma once
#include <SDL.h>
#include <SDL_opengl.h>
#include <SDL_image.h>

class Entity{
public:
	
	Entity(unsigned int spritesheet, float x, float y, float xD, float yD, float rotate, float u, 
		float v, float width, float height, float mass, bool dynamic, bool collide);
	Entity(){};

	//draw sprite
	void drawSprite(float scale);

	//check if entity collides in x or y direction
	bool collideX(Entity* entity);
	bool collideY(Entity* entity);

	unsigned int textureID;

	float x;
	float y;
	float xD;
	float yD;
	float rotation;
	float u;
	float v;
	float width;
	float height;
	
	float mass;
	float xVelo;
	float yVelo;
	float xAcc;
	float yAcc;
	float xFric;
	float yFric;

	bool visible;
	bool dynamic;
	bool collide;

	bool collidedTop;
	bool collidedBot;
	bool collidedRight;
	bool collidedLeft;
	

};



//Nick Zheng
//Assignment 5 - Side Scroller

#pragma once
#include <SDL.h>
#include <SDL_opengl.h>
#include <SDL_image.h>
#include "Entity.h"

Entity::Entity(unsigned int spritesheet, float x, float y, float xD, float yD, float rotate, float u, 
		float v, float width, float height, float mass, bool dynamic, bool collide):
			textureID(spritesheet), x(x), y(y), xD(xD), yD(yD), rotation(rotate), u(u), v(v), width(width), height(height), mass(mass),
				dynamic(dynamic), collide(collide), visible(true){}

void Entity::drawSprite(float scale){
	glEnable(GL_TEXTURE_2D);
	glBindTexture(GL_TEXTURE_2D, textureID);
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glTranslatef(x, y, 0.0);
	glRotatef(rotation, 0.0, 0.0, 1.0);
	GLfloat quad[] = { -width * scale, height * scale, -width * scale, -height * scale,
		width * scale, -height * scale, width * scale, height * scale };
	glVertexPointer(2, GL_FLOAT, 0, quad);
	glEnableClientState(GL_VERTEX_ARRAY);
	GLfloat quadUVs[] = { u, v, u, v + height, u + width, v + height, u + width, v };
	glTexCoordPointer(2, GL_FLOAT, 0, quadUVs);
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	glDrawArrays(GL_QUADS, 0, 4);
	glDisable(GL_TEXTURE_2D);
}



//Nick Zheng
//Assignment 5 - Side Scroller

#pragma once
#include <SDL.h>
#include <SDL_opengl.h>
#include <SDL_image.h>
#include <vector>
#include <fstream>
#include <string>
#include <iostream>
#include <sstream>
#include "Entity.h"

using namespace std;

class App{
public:

	App();
	~App();

	void init();
	void update();
	void reset();

	void render();
	void renderMainMenu();
	void renderGameLevel();
	void renderGameOver();

	void readFile();
	bool readHeader();
	bool readLayerData();
	bool readEntityData();

	bool updateAndRender();

	void placeEntity(string& type, float placeX, float placeY);

	void read();
	bool readHeader(ifstream& stream);
	bool readLayerData(ifstream& stream);
	bool readEntityData(ifstream& stream);

	void buildLevel();
	void clearLevel();
	void makeLevel();
	void worldToTileCoordinates(float x, float y, int* gridX, int* gridY);

private:

	SDL_Window* displayWindow;
	const Uint8* keys;
	bool done;
	ifstream inFile;

	int state;
	int score;

	GLuint font;

	unsigned char** levelData;
//	int* gridX;
//	int* gridY;
	int mapWidth;
	int mapHeight;

	vector<Entity*> enemies;
	vector<Entity*> gems;
	Entity* player;

};


//Nick Zheng
//Assignment 5 - Side Scroller

#include "App.h"

using namespace std;

#define FIXED_TIMESTEP 0.0166666f
#define MAX_TIMESTEPS 6
#define TILE_SIZE 0.4f
//#define LEVEL_HEIGHT 32
//#define LEVEL_WIDTH 128
#define TILE_HEIGHT 0.4f
#define TILE_WIDTH 0.4f
#define SPRITE_COUNT_X 16
#define SPRITE_COUNT_Y 8
float timeLeftOver = 0.0f;
float lastFrameTicks;

enum GameState {STATE_MAIN_MENU, STATE_GAME_LEVEL, STATE_GAME_OVER};

GLuint loadTexture(const char *image_path) {
	SDL_Surface *surface = IMG_Load(image_path);
	if (!surface){return -1;}

	GLuint textureID;
	glGenTextures(1, &textureID);
	glBindTexture(GL_TEXTURE_2D, textureID);

	glTexImage2D(GL_TEXTURE_2D, 0, 4, surface->w, surface->h, 0, GL_RGBA, GL_UNSIGNED_BYTE, surface->pixels);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
	glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);

	SDL_FreeSurface(surface);

	return textureID;
}

//draw texts
void drawText(GLuint fontTexture, string text, float size, float spacing, float r, float g, float b, float a, float x, float y){
	glBindTexture(GL_TEXTURE_2D, fontTexture);
	glEnable(GL_TEXTURE_2D);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
	float texture_size = 1.0 / 16.0f;
	vector<float> vertexData;
	vector<float> texCoordData;
	vector<float> colorData;

	glLoadIdentity();
	glTranslatef(x, y, 0.0f);

	for (size_t i = 0; i < text.size(); i++) {
		float texture_x = (float)(((int)text[i]) % 16) / 16.0f;
		float texture_y = (float)(((int)text[i]) / 16) / 16.0f;

		for(int j=0; j < 4; j++) {
			colorData.push_back(r);
			colorData.push_back(g);
			colorData.push_back(b);
			colorData.push_back(a);
		}

		vertexData.push_back(((size + spacing) * i) + (-0.5f* size)); 
		vertexData.push_back(0.5f* size);
		vertexData.push_back(((size + spacing) * i) + (-0.5f* size)); 
		vertexData.push_back(-0.5f* size);
		vertexData.push_back(((size + spacing) * i) + (0.5f* size));
		vertexData.push_back(-0.5f* size);
		vertexData.push_back(((size + spacing) * i) + (0.5f* size));
		vertexData.push_back(0.5f* size);

		texCoordData.push_back(texture_x);
		texCoordData.push_back(texture_y);
		texCoordData.push_back(texture_x);
		texCoordData.push_back(texture_y + texture_size);
		texCoordData.push_back(texture_x + texture_size);
		texCoordData.push_back(texture_y + texture_size);
		texCoordData.push_back(texture_x + texture_size);
		texCoordData.push_back(texture_y);
	}
	
	glColorPointer(4, GL_FLOAT, 0, colorData.data());
	glEnableClientState(GL_COLOR_ARRAY);
	glVertexPointer(2, GL_FLOAT, 0, vertexData.data());
	glEnableClientState(GL_VERTEX_ARRAY);
	glTexCoordPointer(2, GL_FLOAT, 0, texCoordData.data());
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);
	glDrawArrays(GL_QUADS, 0, text.size() * 4);
	glDisableClientState(GL_COLOR_ARRAY);
}

App::App() {
	init();

	keys = SDL_GetKeyboardState(NULL);

	glViewport(0, 0, 800, 600);
	glMatrixMode(GL_PROJECTION);
	glOrtho(-1.33, 1.33, -1.0, 1.0, -1.0, 1.0);

	state = STATE_MAIN_MENU;
	font = loadTexture("spritesheet_font.png");
	done = false;

	read();

	glMatrixMode(GL_MODELVIEW);
}

//destructor
App::~App(){

	SDL_Quit();
}

//initializer
void App::init(){
	SDL_Init(SDL_INIT_VIDEO);
	displayWindow = SDL_CreateWindow("My Game", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 800, 600, SDL_WINDOW_OPENGL);
	SDL_GLContext context = SDL_GL_CreateContext(displayWindow);
	SDL_GL_MakeCurrent(displayWindow, context);
}

//resets the game
void App::reset(){
	score = 0;
	buildLevel();
//	makeLevel();
}

//open file and read
void App::read(){
	ifstream ifs;
	ifs.open("level.txt");
	string line;
	while(getline(ifs, line)){
		if(line == "[header]"){
			if(!readHeader(ifs)){
				return;
			}
		}
		else if(line == "[layer]"){
			readLayerData(ifs);
		}
		else if(line == "[ObjectsLayer]"){
			readEntityData(ifs);
		}
	}
	ifs.close();
}

//place the entities
void App::placeEntity(string& type, float placeX, float placeY){
	unsigned int sheetSprite = loadTexture("arne_sprites.png");
	unsigned int characters = loadTexture("characters_1.png");
	if(type == "Start"){
		player = new Entity(sheetSprite, placeX, placeY, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, true, false);
	}
	else if(type == "Enemy"){
		//	Entity(float x, float y, float xD, float yD, float rotate, float u, 
		// float v, float width, float height, float mass, bool dynamic, bool collide);
		enemies.push_back(new Entity(characters, placeX, placeY, 1.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, true, false));
	}
	else if(type == "Gems"){
		gems.push_back(new Entity(characters, placeX, placeY, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 1.0f, false, true));
	}
}
//reads data from text
bool App::readHeader(ifstream& stream){
	string line;
	mapWidth = -1;
	mapHeight = -1;
	while(getline(stream, line)){
		if(line == ""){
			break;
		}
		
		istringstream sStream(line);
		string key, value;
		getline(sStream, key, '=');
		getline(sStream, value);

		if(key == "width"){
			mapWidth = atoi(value.c_str());
		}
		else if(key == "height"){
			mapHeight = atoi(value.c_str());
		}
	}
	if(mapWidth == -1 || mapHeight == -1){
		return false;
	}
	//allocate map data
	else{
		levelData = new unsigned char*[mapHeight];
		for(int i=0; i<mapHeight; i++){
			levelData[i] = new unsigned char[mapWidth];
		}
		return true;
	}
}

bool App::readLayerData(ifstream& stream){
	string line;
	while(getline(stream, line)){
		if(line == ""){
			break;
		}
		istringstream sStream(line);
		string key, value;
		getline(sStream, key, '=');
		getline(sStream, value);
		if(key == "data"){
			for(int y=0; y<mapHeight; y++){
				getline(stream, line);
				istringstream lineStream(line);
				string tile;
				for(int x=0; x<mapWidth; x++){
					getline(stream, tile, ',');
					unsigned char val = (unsigned char)atoi(tile.c_str());
					if(val = 0){
					//tiles in this format are indexed from 1, not 0
						levelData[y][x] = val - 1;
					}
					else{
						levelData[y][x] = 0;
					}
				}
			}
		}
	}
	return true;
}

bool App::readEntityData(ifstream& stream){
	string line;
	string type;
	while(getline(stream, line)){
		if(line == ""){
			break;
		}
		istringstream sStream(line);
		string key, value;
		getline(sStream, key, '=');
		getline(sStream, value);
		if(key == "type"){
			type = value;
		}
		else if(key == "location"){
			istringstream lineStream(value);
			string xPosition, yPosition;
			getline(lineStream, xPosition, ',');
			getline(lineStream, yPosition, ',');
			
			float placeX = float(atoi(xPosition.c_str())/16*TILE_SIZE);
			float placeY = float(atoi(yPosition.c_str())/16*TILE_SIZE);

			placeEntity(type, placeX, placeY);
		}
	}
	return true;
}

void App::buildLevel(){
	unsigned char** level1Data;
	level1Data = new unsigned char*[mapHeight];
	for(int i=0; i<mapHeight; i++){
		level1Data[i] = new unsigned char[mapWidth];
		memcpy(levelData[i], level1Data[i], mapWidth);
	}
//	memcpy(levelData, level1Data, LEVEL_HEIGHT*LEVEL_WIDTH);

}

void App::clearLevel(){

	for(int i=0; i<mapHeight; i++){
		delete[] levelData[i];
	}
	delete[] levelData;

}

//render level
void App::makeLevel(){
	vector<float> vertexData;
	vector<float> texCoordData;
	vector<float> colorData;
	for (int y = 0; y < mapHeight; y++) {
		for (int x = 0; x < mapWidth; x++) {
			if (levelData[y][x] != 0){
				float u = (float)(((int)levelData[y][x]) % SPRITE_COUNT_X) / (float)SPRITE_COUNT_X;
				float v = (float)(((int)levelData[y][x]) / SPRITE_COUNT_X) / (float)SPRITE_COUNT_Y;
				float spriteWidth = 1.0f / (float)SPRITE_COUNT_X;
				float spriteHeight = 1.0f / (float)SPRITE_COUNT_Y;

				vertexData.push_back(TILE_WIDTH * x);
				vertexData.push_back(-TILE_HEIGHT * y);
				vertexData.push_back(TILE_WIDTH * x);
				vertexData.push_back((-TILE_HEIGHT * y) - TILE_HEIGHT);
				vertexData.push_back((TILE_WIDTH * x) + TILE_WIDTH);
				vertexData.push_back((-TILE_HEIGHT * y) - TILE_HEIGHT);
				vertexData.push_back((TILE_WIDTH * x) + TILE_WIDTH);
				vertexData.push_back(-TILE_HEIGHT * y);

				texCoordData.push_back(u);
				texCoordData.push_back(v);
				texCoordData.push_back(u);
				texCoordData.push_back(v + spriteHeight);
				texCoordData.push_back(u + spriteWidth);
				texCoordData.push_back(v + spriteHeight);
				texCoordData.push_back(u + spriteWidth);
				texCoordData.push_back(v);
			}
		}
	}
	glVertexPointer(2, GL_FLOAT, 0, vertexData.data());
	glEnableClientState(GL_VERTEX_ARRAY);
	glTexCoordPointer(2, GL_FLOAT, 0, texCoordData.data());
	glEnableClientState(GL_TEXTURE_COORD_ARRAY);

	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

	glMatrixMode(GL_MODELVIEW);
	glPushMatrix();
	glTranslatef(-TILE_SIZE* mapWidth / 2, TILE_SIZE* mapHeight / 2, 0.0f);

	glDrawArrays(GL_QUADS, 0, 4);
	glDisable(GL_TEXTURE_2D);
	glPopMatrix();
}

void App::worldToTileCoordinates(float x, float y, int* gridX, int* gridY){
	*gridX = (int)((x) / TILE_WIDTH);
	*gridY = (int)((y) / TILE_HEIGHT);
}

//renders the states
void App::render(){
	glClearColor(162.0f/255.0f, 208.0f/255.0f, 89.0f/255.0f, 1.0f);
	glClear(GL_COLOR_BUFFER_BIT);

	switch(state){
	case STATE_MAIN_MENU:
		renderMainMenu();
		break;
	case STATE_GAME_LEVEL:
		renderGameLevel();
		break;
	case STATE_GAME_OVER:
		renderGameOver();
		break;
	}
	SDL_GL_SwapWindow(displayWindow);
}

//renders main menu
//GLuint fontTexture, string text, float size, float spacing, float r, float g, float b, float a, float x, float y
void App::renderMainMenu(){
	drawText(font, "GEMS 2.0", 0.2f, -0.1f, 1.0f, 1.0f, 1.0f, 1.0f, -0.3f, 0.7f);
	drawText(font, "Collect all gems", 0.1f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, -0.8f, 0.5f);	
	drawText(font, "Arrow keys to move", 0.1f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, -0.9f, 0.3f);
	drawText(font, "Space to jump", 0.1f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, -0.8f, 0.1f);
	drawText(font, "Reach the end", 0.1f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, -1.0f, -0.1f);
	drawText(font, "Press SPACE to start", 0.1f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, -0.9f, -0.3f);
}

void App::renderGameLevel(){
//	player->drawSprite(1.0f);
//	glLoadIdentity();
//	glPushMatrix();
	makeLevel();

}

//renders game over
void App::renderGameOver(){
	drawText(font, "GAME OVER", 0.2f, -0.1f, 1.0f, 1.0f, 1.0f, 1.0f, -0.5f, 0.7f);
	drawText(font, "Score:" + to_string(score), 0.1f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, -0.6f, 0.5f);
	drawText(font, "Press Enter for main menu", 0.1f, 0.0f, 1.0f, 1.0f, 1.0f, 1.0f, -1.2f, 0.3f);
}

bool App::updateAndRender(){
	float ticks = (float)SDL_GetTicks() / 1000.0f;
	float elapsed = ticks - lastFrameTicks;
	lastFrameTicks = ticks;

	float fixedElapsed = elapsed + timeLeftOver;
	if (fixedElapsed > FIXED_TIMESTEP * MAX_TIMESTEPS){
		fixedElapsed = FIXED_TIMESTEP * MAX_TIMESTEPS;
	}

	while (fixedElapsed >= FIXED_TIMESTEP){
		fixedElapsed -= FIXED_TIMESTEP;
		update();
		render();
		elapsed -= FIXED_TIMESTEP;
	}
	timeLeftOver = fixedElapsed;

	return done;
}

void App::update(){
	SDL_Event event;

//	if(state == STATE_GAME_LEVEL){
//		updateGameLevel();
//	}

	while (SDL_PollEvent(&event)) {
		if (event.type == SDL_QUIT || event.type == SDL_WINDOWEVENT_CLOSE) {
			done = true;
		}
		if(state == STATE_GAME_LEVEL){
			if(event.key.keysym.scancode == SDL_SCANCODE_R){
				state = STATE_GAME_OVER;
			}
		}
		if(state == STATE_MAIN_MENU){
			if(event.key.keysym.scancode == SDL_SCANCODE_SPACE){
				reset();
				state = STATE_GAME_LEVEL;
			}
		}
		if(state == STATE_GAME_OVER){
			if(event.key.keysym.scancode == SDL_SCANCODE_RETURN){
				state = STATE_MAIN_MENU;
			}
		}
	}
}


[ObjectsLayer]
type=Gem
location=161,337,0,0

[ObjectsLayer]
type=Gem
location=257,434,0,0

[ObjectsLayer]
type=Gem
location=464,368,0,0

[ObjectsLayer]
type=Gem
location=687,368,0,0

[ObjectsLayer]
type=Gem
location=1040,301,0,0

[ObjectsLayer]
type=Gem
location=943,207,0,0

[ObjectsLayer]
type=Enemy
location=368,365,0,0

[ObjectsLayer]
type=Enemy
location=1007,204,0,0

[ObjectsLayer]
type=Enemy
location=273,365,0,0

bool App::checkCollisionY(Entity* entity){
	int* gridX = 0;
	int* gridY = 0;
	worldToTileCoord(x, y, gridX, gridY);
	if(*gridY < 0 || *gridX > mapHeight){
		return 0;
	}
	return *gridX;
}

void App::collideX(Entity* ent){
	if(ent->xVelo > 0){
		if ((levelData[checkCollisionX(ent->y - ent->height, 0.0f)][checkCollisionX(ent->x + ent->width, 0.0f)]) ||
			(levelData[checkCollisionY(ent->y + ent->height, 0.0f)][checkCollisionX(ent->x + ent->width, 0.0f)])){
			ent->collidedRight = true;
			ent->x -= ent->xVelo * FIXED_TIMESTEP;
			if (ent->x == player->x&& ent->y == player->y){
				ent->xVelo = 0.0f;//stop for player
			}
			else{
				ent->xVelo = -ent->xVelo;//bounce for enemies
			}
			ent->xAcc = 0.0f;
		}
	}

}

